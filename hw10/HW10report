Q51: E "for" loop is designed to be downcounting but its written container++, if it was counter-- then code would compile 
without any exception.
Q52: A,E,F Addition to A and F, option E is also possible (final main method).
Q53: C,D,E for lines 10 and 12 possible loosy conversion
Q54: A,B,C lines h1, h2 and h3 do not compile due to reduce of visibility of a mthod defined in interface
Q55: B,E,F RuntimeException class and its subclasses are unchecked exceptions.
Q56: F None of the above because it prints "goodbye" and "see you again"
Q57: B,D are compilable options
Q58: A It will print "15". Diamond class will affect CarbonStructure class's count with super method.




Q70: B context of static method main is changed in another method (not static) so they will keep their last values.
Q71: B "ex" inside another catch loop exception named "ex" duplicates terms.
Q73: B "==" operator gives "false" because bike2 is created with "new" phrase. Contents are the same so "equals" results in "true"
Q74: E Code compiles but throws ArrayIndexOutOfBounds exception in runtime.
Q75: C,D,E: Do-while loops may not be converted to for-each loops due to their natural behaviour of running the code inside block once.
Other loops can be converted by using "length" methods etc.
Q76: E Code does not compile.
Q77:   0 objects are available for garbage collector.
Q78:B If the curly brackets were around while loop indention, answer would be 9.
import java.time.*;
class Main {
  public static void main(String[] args) {
    int count=0;
    LocalDate date = LocalDate.of(2017,Month.JANUARY,1);
    while(date.getMonth()!=Month.APRIL)
      date=date.minusMonths(1);
      count++;
    
    System.out.println(count);
  }
}
